function [x,w]=gaussLegendre(N)

% [x,w]=gaussLegendre(N)
%
% This script is for computing definite integrals using Legendre-Gauss
% Quadrature. Computes the Legendre-Gauss nodes and weights  on an interval
% [-1,1] with truncation order N
%
% Suppose you have a continuous function f(x) which is defined on [a,b]
% which you can evaluate at any x in [a,b]. Simply evaluate it at all of
% the values contained in the x vector to obtain a vector f. Then compute
% the definite integral using sum(f.*w);
%
% Written by Greg von Winckel - 02/25/2004
% Modified by SFM-LaCaN - Jun 2015

%Simplification
switch N
    case 1
        x=0;
        w=2;
    case 2
        x=[-sqrt(3)/3,sqrt(3)/3]';
        w=[1,1]';
    case 3
        x=[-sqrt(15)/5,sqrt(15)/5,0]';
        w=[5,5,8]'/9;
    case 4
        x=[0.339981043584856265, 0.861136311594052573, -0.339981043584856265, -0.861136311594052573]';
        w=[0.652145154862546137, 0.347854845137453860, 0.652145154862546153, 0.347854845137453858]';
    case 5
        x=[0.0e0 0.538469310105683090e0 0.906179845938663994e0 -0.538469310105683090e0 -0.906179845938663994e0]';
        w=[0.56888888888888887e0 0.47862867049936648e0 0.236926885056189087e0 0.47862867049936648e0 0.236926885056189083e0]';
    case 6
        x=[0.932469514203152   0.661209386466264   0.238619186083197  -0.238619186083197 -0.661209386466264  -0.932469514203152]';
        w=[0.171324492379170   0.360761573048139   0.467913934572691   0.467913934572691 0.360761573048139   0.171324492379170]';
    case 7
        x=[0.949107912342758   0.741531185599394   0.405845151377397                   0 -0.405845151377397  -0.741531185599394  -0.949107912342758]';
        w=[0.129484966168870   0.279705391489277   0.381830050505119   0.417959183673469 0.381830050505119   0.279705391489277   0.129484966168870]';
    case 8
        x=[0.960289856497536   0.796666477413627   0.525532409916329   0.183434642495650 -0.183434642495650  -0.525532409916329  -0.796666477413627  -0.960289856497536]';
        w=[0.101228536290377   0.222381034453374   0.313706645877887   0.362683783378362 0.362683783378362   0.313706645877887   0.222381034453374   0.101228536290377]';
    case 9
        x=[0.968160239507626   0.836031107326636   0.613371432700590   0.324253423403809                  0  -0.324253423403809  -0.613371432700590  -0.836031107326636 -0.968160239507626]';
        w=[0.081274388361575   0.180648160694857   0.260610696402936   0.312347077040003   0.330239355001260 0.312347077040003   0.260610696402936   0.180648160694857   0.081274388361575]';
    case 10
        x=[0.973906528517172   0.865063366688985   0.679409568299024   0.433395394129247   0.148874338981631 -0.148874338981631  -0.433395394129247  -0.679409568299024  -0.865063366688985  -0.973906528517172]';
        w=[0.066671344308688   0.149451349150581   0.219086362515982   0.269266719309996   0.295524224714753 0.295524224714753   0.269266719309996   0.219086362515982   0.149451349150581   0.066671344308688]';
    case 100
        x=[0.978228658146057   0.887062599768095   0.730152005574049   0.519096129206812   0.269543155952345                 0  -0.269543155952345  -0.519096129206812  -0.730152005574049  -0.887062599768095 -0.978228658146057]';
        w=[0.055668567116174   0.125580369464904   0.186290210927734   0.233193764591990   0.262804544510247 0.272925086777901   0.262804544510247   0.233193764591990   0.186290210927734   0.125580369464904 0.055668567116174]';
    otherwise
        a=-1;b=1;
        N=N-1;
        N1=N+1; N2=N+2;
        
        xu=linspace(-1,1,N1)';
        
        % Initial guess
        y=cos((2*(0:N)'+1)*pi/(2*N+2))+(0.27/N1)*sin(pi*xu*N/N2);
        
        % Legendre-Gauss Vandermonde Matrix
        L=zeros(N1,N2);
        
        % Derivative of LGVM
        Lp=zeros(N1,N2);
        
        % Compute the zeros of the N+1 Legendre Polynomial
        % using the recursion relation and the Newton-Raphson method
        
        y0=2;
        
        % Iterate until new points are uniformly within epsilon of old points
        while max(abs(y-y0))>eps
            
            
            L(:,1)=1;
            Lp(:,1)=0;
            
            L(:,2)=y;
            Lp(:,2)=1;
            
            for k=2:N1
                L(:,k+1)=( (2*k-1)*y.*L(:,k)-(k-1)*L(:,k-1) )/k;
            end
            
            Lp=(N2)*( L(:,N1)-y.*L(:,N2) )./(1-y.^2);
            
            y0=y;
            y=y0-L(:,N2)./Lp;
            
        end
        
        % Linear map from[-1,1] to [a,b]
        x=(a*(1-y)+b*(1+y))/2;
        
        % Compute the weights
        w=(b-a)./((1-y.^2).*Lp.^2)*(N2/N1)^2;
        
        %x = x'; w = w';
end
